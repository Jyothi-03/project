###########################################
# properties described in 7.2 user manual #
###########################################
org.gradle.caching=true
# org.gradle.caching=(true,false)
# When set to true, Gradle will reuse task outputs from any previous build, when possible, resulting is much faster builds.
# Learn more about using the build cache.
#
org.gradle.caching.debug=false
# org.gradle.caching.debug=(true,false)
# When set to true, individual input property hashes and the build cache key for each task are logged on the console.
# Learn more about task output caching.
#
org.gradle.configureondemand=false
# org.gradle.configureondemand=(true,false)
# Enables incubating configuration on demand, where Gradle will attempt to configure only necessary projects.
#
org.gradle.console=auto
# org.gradle.console=(auto,plain,rich,verbose)
# Customize console output coloring or verbosity.
# Default depends on how Gradle is invoked.
# See command-line logging for additional details.
#
org.gradle.daemon=true
# org.gradle.daemon=(true,false)
# When set to true the Gradle Daemon is used to run the build.
# Default is true.
#
org.gradle.daemon.idletimeout=10800000
# org.gradle.daemon.idletimeout=(# of idle millis)
# Gradle Daemon will terminate itself after specified number of idle milliseconds.
# Default is 10800000 (3 hours).
#
org.gradle.debug=false
# org.gradle.debug=(true,false)
# When set to true, Gradle will run the build with remote debugging enabled, listening on port 5005.
# Note that this is the equivalent of adding -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 to the JVM command line
# and will suspend the virtual machine until a debugger is attached.
# Default is false.
#
# org.gradle.java.home=(path to JDK home)
# Specifies the Java home for the Gradle build process.
# The value can be set to either a jdk or jre location, however, depending on what your build does, using a JDK is safer.
# A reasonable default is derived from your environment (JAVA_HOME or the path to java) if the setting is unspecified.
# This does not affect the version of Java used to launch the Gradle client VM (see Environment variables).
#
org.gradle.jvmargs=-Xmx4g
# org.gradle.jvmargs=(JVM arguments)
# Specifies the JVM arguments used for the Gradle Daemon.
# The setting is particularly useful for configuring JVM memory settings for build performance.
# This does not affect the JVM settings for the Gradle client VM.
#
org.gradle.logging.level=lifecycle
# org.gradle.logging.level=(quiet,warn,lifecycle,info,debug)
# When set to quiet, warn, lifecycle, info, or debug, Gradle will use this log level.
# The values are not case sensitive.
# The lifecycle level is the default.
# See Choosing a log level.
#
org.gradle.parallel=true
# org.gradle.parallel=(true,false)
# When configured, Gradle will fork up to org.gradle.workers.max JVMs to execute projects in parallel.
# To learn more about parallel task execution, see the section on Gradle build performance.
#
org.gradle.priority=normal
# org.gradle.priority=(low,normal)
# Specifies the scheduling priority for the Gradle daemon and all processes launched by it.
# Default is normal.
# See also performance command-line options.
#
org.gradle.vfs.verbose=false
# org.gradle.vfs.verbose=(true,false)
# Configures verbose logging when watching the file system.
# Default is off.
#
org.gradle.vfs.watch=false
# org.gradle.vfs.watch=(true,false)
# Toggles watching the file system.
# When enabled Gradle re-uses information it collects about the file system between builds.
# Enabled by default on operating systems where Gradle supports this feature.
#
org.gradle.warning.mode=all
# org.gradle.warning.mode=(all,fail,summary,none)
# When set to all, summary or none, Gradle will use different warning type display.
# See Command-line logging options for details.
#
# org.gradle.workers.max=(max # of worker processes)
# When configured, Gradle will use a maximum of the given number of workers.
# Default is number of CPU processors.
# See also performance command-line options.

#####################################
#added from defect 132506 comment 3 #
#####################################
#Example shows a timeouts of 10 minutes, 20 retries, with 500ms backoff between retries
systemProp.http.connectionTimeout=600000
systemProp.http.socketTimeout=600000
systemProp.org.gradle.internal.http.connectionTimeout=600000
systemProp.org.gradle.internal.http.socketTimeout=600000
systemProp.org.gradle.internal.repository.max.retries=20
systemProp.org.gradle.internal.repository.initial.backoff=500

##################################################
##################################################
###
### These are the main application location paths
### and other misc build variables
###
### if you add any new properties
### prefix them with systemProp.machine.
### example: systemProp.machine.yourNewProperty=someValue
###
##################################################
##################################################
# The build label date for the folder to put the output in for non RTC builds.
# Can be used if you always want the same output location or repeatable builds.
# If commented out will auto-generate the value using the current date/time.
#systemProp.machine.buildLabel                      = 19000101-0000

# Your machine name used in logging output.
systemProp.machine.build.machine                   = CICD_PIPELINE_BUILD
systemProp.machine.computername                    = CICD_PIPELINE_BUILD
systemProp.machine.hostname                        = CICD_PIPELINE_BUILD

# Root directory of build output
# For fs103 this is the F: drive and root of fs103 ftp
# For local RAD build this is the root
# folder where the build output will go
# using the normal fs103 structure
# Example for Charger_3.2.2_Trunk workspace:
# <systemProp.machine.buildLoc.output>/Charger/Charger_3.2.2_Trunk/DEV/19000101-0000
# For Windows, for example the C drive, use C:/ and the output will
# be in C:/Charger/Charger_3.2.2_Trunk/DEV/19000101-0000
systemProp.machine.buildLoc.output                 = /home/jenkins/buildOutput

# The drive letter of the build output path.
# Some ant scripts use this.
systemProp.machine.buildLoc.drive                  = /home/jenkins/driveD

# Not used for RAD builds
# but for RTC build this prevents
# constant churn on a shared drive
# i.e makes builds faster
# Not used for RAD builds (set to false)
systemProp.machine.isScratchBuild                  = false

# Not used for RAD builds
systemProp.machine.buildLoc.scratch                = /home/jenkins/driveD/scratch

systemProp.machine.middleware.dir                  = /home/jenkins/middleware

# Not used for RAD builds
# but is the root dir where stream are extracted/loaded
systemProp.machine.buildLoc.source                 = /home/jenkins/driveD/FO-Builds

systemProp.machine.appLoc.ace11r0m0f7              = NOT_SET_YET_SETUP_ERROR_appLoc_ace11r0m0f7
systemProp.machine.appLoc.ace11r0m0f8              = NOT_SET_YET_SETUP_ERROR_appLoc_ace11r0m0f8
systemProp.machine.appLoc.ace12r0m5f0              = NOT_SET_YET_SETUP_ERROR_appLoc_ace12r0m5f0
systemProp.machine.appLoc.ant183                   = NOT_SET_YET_SETUP_ERROR_appLoc_ant183

# The DB2 root installation location
# For the DB2 version look in Gradle_Build Definition for db2.root.
# Can leave the defaults for ones not being used in this build.
systemProp.machine.appLoc.db2v9r7                  = NOT_SET_YET_SETUP_ERROR_appLoc_db2v9r7
systemProp.machine.appLoc.db2v10r0                 = NOT_SET_YET_SETUP_ERROR_appLoc_db2v10r0
systemProp.machine.appLoc.db2v10r1                 = NOT_SET_YET_SETUP_ERROR_appLoc_db2v10r1
systemProp.machine.appLoc.db2v10r5                 = NOT_SET_YET_SETUP_ERROR_appLoc_db2v10r5
systemProp.machine.appLoc.db2v11r0                 = NOT_SET_YET_SETUP_ERROR_appLoc_db2v11r0

# IBM Installation Manager (User mode)
systemProp.machine.appLoc.iim                      = NOT_SET_YET_SETUP_ERROR_appLoc_iim

# IBM Message Broker / Integration Bus v9
# The root installation location
systemProp.machine.appLoc.iib9009                  = NOT_SET_YET_SETUP_ERROR_appLoc_iib9009
systemProp.machine.appLoc.iibv10r0m0f18            = NOT_SET_YET_SETUP_ERROR_appLoc_iibv10r0m0f18

# IBM Integration Bus Toolkit v9
# This is installed using Installation Manager
systemProp.machine.appLoc.iibt9009                 = NOT_SET_YET_SETUP_ERROR_appLoc_iibt9009

# Location of the IBM Java SDK/JDK used to build the product
# all three need to be specified.  Note: These are not what is packaged with the product.
systemProp.machine.appLoc.java6                    = NOT_SET_YET_SETUP_ERROR_appLoc_java6
systemProp.machine.appLoc.java7                    = NOT_SET_YET_SETUP_ERROR_appLoc_java7
systemProp.machine.appLoc.java8                    = NOT_SET_YET_SETUP_ERROR_appLoc_java8
systemProp.machine.appLoc.java11                   = NOT_SET_YET_SETUP_ERROR_appLoc_java11
systemProp.machine.appLoc.java17                   = NOT_SET_YET_SETUP_ERROR_appLoc_java17
systemProp.machine.appLoc.java21                   = NOT_SET_YET_SETUP_ERROR_appLoc_java21

# IBM Message Broker v8 (not used for v3.2.2)
systemProp.machine.appLoc.mb8                      = NOT_SET_YET_SETUP_ERROR_appLoc_mb8

# IBM MQ
# The root installation location
# For the version look in Gradle_Build Definition for web_mq (note the underscore instead of the period).
# Can leave the defaults for ones not being used in this build.
# IBM MQ v7 (not used for v3.2.2)
systemProp.machine.appLoc.mq7                      = NOT_SET_YET_SETUP_ERROR_appLoc_mq7

# IBM MQ v8
systemProp.machine.appLoc.mq8006                   = NOT_SET_YET_SETUP_ERROR_appLoc_mq8006

# IBM Package Developer
# For the version to configure look at Gradle_Build_Definition for pdev.dir
systemProp.machine.appLoc.pdev_5_14_11             = NOT_SET_YET_SETUP_ERROR_appLoc_pdev_5_14_11
systemProp.machine.appLoc.pdev_5_14_7              = NOT_SET_YET_SETUP_ERROR_appLoc_pdev_5_14_7
systemProp.machine.appLoc.pdev_5_15_9              = NOT_SET_YET_SETUP_ERROR_appLoc_pdev_5_15_9
systemProp.machine.appLoc.pdev_5_16_4              = NOT_SET_YET_SETUP_ERROR_appLoc_pdev_5_16_4

# Rational Software Architect
# Needed for FTM Base/IP
systemProp.machine.appLoc.rsa96                    = NOT_SET_YET_SETUP_ERROR_appLoc_rsa96
systemProp.machine.appLoc.rsa97                    = NOT_SET_YET_SETUP_ERROR_appLoc_rsa97

# IBM Rational Team Concert Buildsystem.
# Need to append the buildsystem/buildtoolkit to the root install location.
# Only required by the build machine.
systemProp.machine.appLoc.RTCBuildSystemToolkit502 = NOT_SET_YET_SETUP_ERROR_appLoc_RTCBuildSystemToolkit502
systemProp.machine.appLoc.RTCBuildSystemToolkit604 = NOT_SET_YET_SETUP_ERROR_appLoc_RTCBuildSystemToolkit604
systemProp.machine.appLoc.RTCBuildSystemToolkit606 = NOT_SET_YET_SETUP_ERROR_appLoc_RTCBuildSystemToolkit606

# IBM WebSphere Application Server
# Look at the Gradle_Build_Definition.properties for web.root to determine what version is being used
systemProp.machine.appLoc.was80                    = NOT_SET_YET_SETUP_ERROR_appLoc_was80
systemProp.machine.appLoc.was855                   = NOT_SET_YET_SETUP_ERROR_appLoc_was855
systemProp.machine.appLoc.was90                    = NOT_SET_YET_SETUP_ERROR_appLoc_was90

# IBM Message Broker Toolkit
# Required for below Charger v3.2.0.
systemProp.machine.appLoc.wmbt8                    = NOT_SET_YET_SETUP_ERROR_appLoc_wmbt8

###################################################################################
#### The rest of this is not used in later build.
#### Except for docker stuff at the bottom
###################################################################################

# API PDF Document.
# Can obtain from the fs103 build machine
systemProp.machine.buildLoc.chargerPub             = NOT_USED_IN_NEW_BUILDS_buildLoc_chargerPub

# Note: property not required for Charger v3.2.2
systemProp.machine.appLoc.clp322                   = NOT_USED_IN_NEW_BUILDS_appLoc_clp322

# this is only need on Windows host ( with pax installed )
systemProp.machine.appLoc.cygwin                   = NOT_USED_IN_NEW_BUILDS_appLoc_cygwin

# Location of base FTM versions
# Look at the Gradle_Build_Definition.properties for property src.hemi.dir to determine
# the one being used.
# Only the one referenced by the stream is required for the build
# but other stream builds can/will use the other values
systemProp.machine.appLoc.ftm_2014_11_28_2137_GA   = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_2014_11_28_2137_GA
systemProp.machine.appLoc.ftm_3001_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3001_GA
systemProp.machine.appLoc.ftm_3002_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3002_GA
systemProp.machine.appLoc.ftm_3003_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3003_GA
systemProp.machine.appLoc.ftm_3004_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3004_GA
systemProp.machine.appLoc.ftm_3005_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3005_GA
systemProp.machine.appLoc.ftm_3006_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3006_GA
systemProp.machine.appLoc.ftm_3007_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3007_GA
systemProp.machine.appLoc.ftm_3009_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3009_GA
systemProp.machine.appLoc.ftm_3200_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3200_GA
systemProp.machine.appLoc.ftm_3202_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3202_GA
systemProp.machine.appLoc.ftm_3202_NIGHTLY         = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3202_NIGHTLY
systemProp.machine.appLoc.ftm_3220_GA              = NOT_USED_IN_NEW_BUILDS_appLoc_ftm_3220_GA

# The root location of the folder that contains the IBM JAVA JRE's
# that will be packaged with the product.
systemProp.machine.appLoc.jvm                      = NOT_USED_IN_NEW_BUILDS_appLoc_jvm

# The root location of the folder that contains pre-built native code sub-folder
# that will be packaged with the product.
# Look in Gradle_Build_Definition.properties for \${machine.appLoc.nativecode}, and this
# will show you the version you need to copy from fs103.
systemProp.machine.appLoc.nativecode               = NOT_USED_IN_NEW_BUILDS_appLoc_nativecode

# Package Utility is currently not being used.  You do not need to set a value.
systemProp.machine.appLoc.packageutility           = NOT_USED_IN_NEW_BUILDS_appLoc_packageutility

# Not used for RAD builds
# Used to connect to FTP server fs103
systemProp.machine.ftp.hostname                    = NOT_USED_IN_NEW_BUILDS_ftp_hostname
systemProp.machine.ftp.user                        = NOT_USED_IN_NEW_BUILDS_ftp_user
systemProp.machine.ftp.passwordFile                = NOT_USED_IN_NEW_BUILDS_ftp_passwordFile

# Not used for RAD builds
# Used to connect to RTC server
systemProp.machine.rtc.user                        = yourId@us.ibm.com
systemProp.machine.rtc.passwordFile                = /home/jenkins/RTC/passfile

# the following artifactory properties are for the artifactory
# plugin so it can login to taas's artifactory server

# artifactory settings
#
#artifactory_base_domain_name = URL base name without prefix or artifactory path. example: artifactory.swg-devops.com
#artifactory_contextUrl       = URL to artifactory server. example http://na.\${artifactory_base_domain_name}/artifactory
#artifactory_user             = user ID for artifactory (typically your w3id)
#artifactory_password         = plaintext/encrypted password for artifactory (typically your w3id)
#artifactory_publish_repo     = repository name for build output artifacts
#artifactory_resolve_repo     = repository name for resolving thirdparty artifacts
#artifactory_docker_registry  = repository name for docker to use as a docker registry
#artifactory_git_lfs          = repository name for git to use as a LFS location

# These settings can be changed to a local ones if you have installed it locally
# and populated it with the required artifacts

# full path the the JFrog cli executable
# which can be downloaded from here https://jfrog.com/getcli/
# you must run the \"<jfrogCLI> rt config\" command to configure the artifactory connection.
# you also need the same type values below.
artifactory_cli_cmd                                = NOT_SET_YET_SETUP_ERROR_artifactory_cli_cmd
